/* Generated By:JavaCC: Do not edit this line. LabelExpressionParser.java */
/* gvSIG. Sistema de Informaci칩n Geogr치fica de la Generalitat Valenciana
 *
 * Copyright (C) 2004 IVER T.I. and Generalitat Valenciana.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,USA.
 *
 * For more information, contact:
 *
 *  Generalitat Valenciana
 *   Conselleria d'Infraestructures i Transport
 *   Av. Blasco Ib치침ez, 50
 *   46010 VALENCIA
 *   SPAIN
 *
 *      +34 963862235
 *   gvsig@gva.es
 *      www.gvsig.gva.es
 *
 *    or
 *
 *   IVER T.I. S.A
 *   Salamanca 50
 *   46005 Valencia
 *   Spain
 *
 *   +34 963163400
 *   dac@iver.es
 */
package org.gvsig.symbology.fmap.labeling.parse;
import java.util.*;
import java.io.*;


import com.hardcode.gdbms.engine.values.*;
import org.gvsig.symbology.fmap.rendering.filter.operations.*;
import org.gvsig.symbology.fmap.labeling.parse.*;
import org.gvsig.symbology.fmap.labeling.lang.functions.*;
/**
 * @author Pepe Vidal Salvador - jose.vidal.salvador@iver.es
 * @author Jaume Dominguez Faus - jaume.dominguez@gmail.com
 *
 */
public class LabelExpressionParser implements LabelExpressionParserConstants {
        private Stack stack = new Stack();
        private static OperatorsFactory operators = OperatorsFactory.getInstance();
        private Hashtable<String, Value> symbols = new Hashtable<String, Value>();
        private ArrayList<String> classNames = new ArrayList<String>();

        public ArrayList<String> getClassNames (){
                return classNames;
        }

        public void addClassName(String name){

                for (int i = 0; i < classNames.size(); i++) {
                        if(classNames.get(i).compareTo(name)==0)
                                return;
                }
                classNames.add(name);

        }

        public Hashtable<String,Value> getSymbols(){

                return symbols;

        }

        public Object pop() throws ExpressionException {

                Object popObject = stack.pop();
                Object result = ((Expression)popObject).evaluate();

                if(result instanceof String) {
                        return new String (result.toString());
                }
                else if (result instanceof Boolean) {
                        return new Boolean (result.toString());
                }
                else if (result instanceof Double) {
                        return Double.valueOf(result.toString());
                }
                else if (result instanceof Integer) {
                        return Integer.valueOf(result.toString());
                }
                return null;

        }

        public Stack getStack(){

                return this.stack;

        }

        public LabelExpressionParser(StringReader reader, Hashtable<String, Value> symbolsTable) {

                this(reader);
                this.symbols = symbolsTable;

        }

        /**
	 * it is default because it is used in the unit tests
	 * but this method is not part of the public API, so
	 * don't use it!
	 */
        void putSymbol(String string, Value value){

                this.symbols.put(string,value);

        }

        public static String tokenFor(int tokenCode) {

                return tokenImage[tokenCode].replaceAll("\"", "");

        }

        public void setOperatorsFactory (OperatorsFactory opFac) {

                this.operators = opFac;

        }

        public static void main(String[]args)throws ParseException,ExpressionException{

                LabelExpressionParser parser = new LabelExpressionParser(new StringReader("([RD_6]+3)*5;"));
                parser.symbols.put("RD_6",ValueFactory.createValue(2));
                operators.addOperator(IndexOfFunction.class);
                operators.addOperator(SubstringFunction.class);
                parser.setOperatorsFactory(operators);
                parser.LabelExpression();
                System.out.print(((Expression)(parser.getStack().pop())).evaluate().toString());


        }

/* LABEL EXPRESSION */
//We have to use this function if we want to evaluate an String which contains different Expressions
//inside
  final public void LabelExpression() throws ParseException {
    Expression();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_2(2)) {
        jj_consume_token(EOFIELD);
        Expression();
                         Expression leftExpression = (Expression)stack.pop();
                 Expression rightExpression = (Expression)stack.pop();

                         Expression labelExpr = new LabelExpressionOperator(symbols);
                         labelExpr.addArgument(0, rightExpression);
                         labelExpr.addArgument(0, leftExpression);

                stack.push(labelExpr);
      } else if (jj_2_3(2)) {
        Expression();
            Expression leftExpression2 = (Expression)stack.pop();
                Expression rightExpression2 = (Expression)stack.pop();

                        Expression fieldExpr = new FieldExpressionOperator(symbols);
                        fieldExpr.addArgument(0, rightExpression2);
                        fieldExpr.addArgument(0, leftExpression2);

                stack.push(fieldExpr);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Expression() throws ParseException {
    AndExpression();
    label_2:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(OR);
      AndExpression();
    Expression leftExpression = (Expression)stack.pop();
    Expression rightExpression = (Expression)stack.pop();

        Expression orExpr = new OrOperator(symbols);
        orExpr.addArgument(0, rightExpression);
        orExpr.addArgument(0, leftExpression);

    stack.push(orExpr);
    }
  }

  final public void AndExpression() throws ParseException {
  Token x;
    EqCompExpression();
    label_3:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_3;
      }
      x = jj_consume_token(AND);
      EqCompExpression();
    Expression rightExpression = (Expression)stack.pop();
    Expression leftExpression = (Expression)stack.pop();

    Expression func = new AndOperator(symbols);

    func.addArgument(0, rightExpression);
    func.addArgument(0, leftExpression);

    stack.push(func);
    }
  }

  final public void EqCompExpression() throws ParseException {
  Token x;
    ComparisonExpression();
    label_4:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_7(2)) {
        x = jj_consume_token(EQ);
      } else if (jj_2_8(2)) {
        x = jj_consume_token(NE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      ComparisonExpression();
    Expression rightExpression = (Expression)stack.pop();
    Expression leftExpression = (Expression)stack.pop();
    Expression func = null;

    if (x.kind == EQ)func = new EqOperator(symbols);
    else if (x.kind == NE)func = new NeOperator(symbols);

    func.addArgument(0, rightExpression);
    func.addArgument(0, leftExpression);

    stack.push(func);
    }
  }

  final public void ComparisonExpression() throws ParseException {
  Token x;
    AdditiveExpression();
    label_5:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_10(2)) {
        x = jj_consume_token(LT);
      } else if (jj_2_11(2)) {
        x = jj_consume_token(LE);
      } else if (jj_2_12(2)) {
        x = jj_consume_token(GT);
      } else if (jj_2_13(2)) {
        x = jj_consume_token(GE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    Expression rightExpression = (Expression)stack.pop();
    Expression leftExpression = (Expression)stack.pop();
    Expression func = null;


    if (x.kind == LT)func = new LessThanOperator(symbols);
    else if (x.kind == LE)func = new LessThanOrEqualsOperator(symbols);
    else if (x.kind == GT)func = new GreaterThanOperator(symbols);
    else if (x.kind == GE)func = new GreaterThanOrEqualsOperator(symbols);

    func.addArgument(0, rightExpression);
    func.addArgument(0, leftExpression);

    stack.push(func);
    }
  }

  final public void AdditiveExpression() throws ParseException {
  Token x;
    MultiplicativeExpression();
    label_6:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_6;
      }
      if (jj_2_15(2)) {
        x = jj_consume_token(PLUS);
      } else if (jj_2_16(2)) {
        x = jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    Expression rightExpression = (Expression)stack.pop();
    Expression leftExpression = (Expression)stack.pop();
    Expression func = null;

    if (x.kind == PLUS)func = new AddOperator(symbols);
    else func = new MinusOperator(symbols);

    func.addArgument(0, rightExpression);
    func.addArgument(0, leftExpression);

    stack.push(func);
    }
  }

//void MultiplicativeExpression():{
//  Token x;
//}
//{
//  UnaryElement()((x = <MULTIPLY>
//  | x = <DIVIDE>)UnaryElement(){
//  	try{
//  			Expression A = (Expression) stack.pop();
//			Expression B = (Expression) stack.pop();
//			 boolean aInt = (((Expression) A).evaluate() instanceof Integer);
//			 boolean bInt = (((Expression) B).evaluate() instanceof Integer);
//			if (aInt &&	bInt) {
//				int a = (Integer) A.evaluate();
//				int b = (Integer) B.evaluate();
//				if (x.kind == MULTIPLY)
//					stack.push(new NumericalConstant(new Integer(b * a),symbols));
//				else
//					stack.push(new NumericalConstant(new Integer(b / a),symbols));
//			} else {
//
//				double a = new Double(((Expression)A).evaluate().toString());
//                double b = new Double(((Expression)B).evaluate().toString());
//				if (x.kind == MULTIPLY)
//					stack.push(new NumericalConstant(new Double(b * a),symbols));
//				else
//					stack.push(new NumericalConstant(new Double(b / a),symbols));
//			}}catch (ClassCastException ex) {
//                  ex.printStackTrace();
//            } catch (ExpressionException e) {
//				  e.printStackTrace();
//			}
//
//	})*
//}
  final public void MultiplicativeExpression() throws ParseException {
  Token x;
    UnaryElement();
    label_7:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_18(2)) {
        x = jj_consume_token(MULTIPLY);
      } else if (jj_2_19(2)) {
        x = jj_consume_token(DIVIDE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryElement();
    Expression rightExpression = (Expression)stack.pop();
    Expression leftExpression = (Expression)stack.pop();
    Expression func = null;

    if (x.kind == MULTIPLY)func = new MultOperator(symbols);
    else func = new DivOperator(symbols);

    func.addArgument(0, rightExpression);
    func.addArgument(0, leftExpression);

    stack.push(func);
    }
  }

  final public void UnaryElement() throws ParseException {
  Token x = null;
    if (jj_2_22(2)) {
      if (jj_2_20(2)) {
        x = jj_consume_token(PLUS);
      } else if (jj_2_21(2)) {
        x = jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryElement();
              try{
                 Object A = stack.pop();
                         if ((((Expression) A).evaluate() instanceof Integer)) {
                                int a = (Integer) ((Expression) A).evaluate();
                                if (x.kind == PLUS)
                                        stack.push(new NumericalConstant(new Integer(a),symbols));
                                else
                                        stack.push(new NumericalConstant(new Integer(-a),symbols));
                        } else {
                                double a = (Double) ((Expression) A).evaluate();
                                if (x.kind == PLUS)
                                        stack.push(new NumericalConstant(new Double(a),symbols));
                                else
                                        stack.push(new NumericalConstant(new Double(-a),symbols));
                        }
                         } catch (ClassCastException ex) {
               ex.printStackTrace();
             }catch (ExpressionException ex) {
                 ex.printStackTrace();
             }
    } else if (jj_2_23(2)) {
      BooleanUnaryElement();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanUnaryElement() throws ParseException {
        Token t;
    if (jj_2_24(2)) {
      t = jj_consume_token(NOT);
      UnaryElement();
                Expression rightExpression = (Expression)stack.pop();
                Expression func = new NotOperator(symbols);
                func.addArgument(0, rightExpression);
                stack.push(func);
    } else if (jj_2_25(2)) {
      Element();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Element() throws ParseException {
  Token x;
  String y =  "[$,A-Z,_,a-z]([$,A-Z,_,a-z]|[0-9])*";
    if (jj_2_26(2)) {
      jj_consume_token(OPEN_SQ_BRACKETS);
      x = jj_consume_token(IDENTIFIER);
      jj_consume_token(CLOSE_SQ_BRACKETS);
    ReplaceOperator func = new ReplaceOperator(symbols);
     func.addArgument(x.image);
        stack.push(func);
        addClassName(x.image);
    } else if (jj_2_27(2)) {
      x = jj_consume_token(INTEGER);
        NumericalConstant intC = new NumericalConstant(Integer.valueOf(x.image),symbols);
        stack.push(intC);
    } else if (jj_2_28(2)) {
      x = jj_consume_token(FLOATING_POINT);
        NumericalConstant doubleC = new NumericalConstant(Double.valueOf(x.image),symbols);
        stack.push(doubleC);
    } else if (jj_2_29(2)) {
      x = jj_consume_token(STRING);
    StringConstant stringValue = new StringConstant(x.image.substring(1, x.image.length()-1),symbols);
    stack.push(stringValue);
    } else if (jj_2_30(2)) {
      x = jj_consume_token(BOOLEAN);
    BooleanConstant boolValue = new BooleanConstant(x.image,symbols);
    stack.push(boolValue);
    } else if (jj_2_31(2)) {
      x = jj_consume_token(NULL);
        NullConstant nullValue = new NullConstant(symbols);
    stack.push(nullValue);
    } else if (jj_2_32(2)) {
      function();
    } else if (jj_2_33(2)) {
      jj_consume_token(OPEN_PARENTHESIS);
      Expression();
      jj_consume_token(CLOSE_PARENTHESIS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void function() throws ParseException {
  String functionName;
  int argCount = 0;
  Expression function;
  Token x;
    if (jj_2_34(2)) {
      jj_consume_token(IDENTIFIER);
    functionName = token.image;
      argCount = Arguments();
    try {
        function = (Expression) operators.functions.get(functionName).getConstructor(new Class[] { Hashtable.class }).newInstance( new Hashtable<String, Value>());
    }
    catch (Exception e){
      {if (true) throw new ParseException("Problem with function '"+functionName+"': "+e.toString());}
    }
    if (function == null){if (true) throw new ParseException("Nonexisting function name '"+functionName+"'");}
    for (int i = 0;
    i<argCount;
    i++){
      Expression arg = (Expression)stack.pop();
      function.addArgument(0, arg);
    }
    stack.push(function);
    } else if (jj_2_35(2)) {
      x = jj_consume_token(IDENTIFIER);
    StringConstant stringValue = new StringConstant(x.image,symbols);
    stack.push(stringValue);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int Arguments() throws ParseException {
  int argCount = 0;
    jj_consume_token(OPEN_PARENTHESIS);
    if (jj_2_36(2)) {
      argCount = ArgumentList();
    } else {
      ;
    }
    jj_consume_token(CLOSE_PARENTHESIS);
    {if (true) return argCount;}
    throw new Error("Missing return statement in function");
  }

  final public int ArgumentList() throws ParseException {
  int argCount = 0;
    Expression();
    argCount++;
    label_8:
    while (true) {
      if (jj_2_37(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      Expression();
    argCount++;
    }
    {if (true) return argCount;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(OPEN_SQ_BRACKETS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(OPEN_PARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    }
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(EOFIELD)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  final private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(OPEN_PARENTHESIS)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(FLOATING_POINT)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  public LabelExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[37];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public LabelExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public LabelExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LabelExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public LabelExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LabelExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public LabelExpressionParser(LabelExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(LabelExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[37];
    for (int i = 0; i < 37; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 37; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
